POST /_ingest/pipeline/_simulate
{
  "pipeline" :
  {
  "processors": [
    {
      "remove": {
        "field": [
          "ecs",
          "metricset",
          "agent",
          "host",
          "event",
          "service",
          "@metadata"
        ],
        "description": "Removes unnecessary general fields."
      }
    },
    {
      "remove": {
        "field": [
          "http.docker_hub.permissions",
          "http.docker_hub.last_updated",
          "http.docker_hub.user",
          "http.docker_hub.is_private",
          "http.docker_hub.is_automated",
          "http.docker_hub.is_migrated",
          "http.docker_hub.can_edit",
          "http.docker_hub.description",
          "http.docker_hub.repository_type",
          "http.docker_hub.status",
          "http.docker_hub.full_description",
          "http.docker_hub.has_starred"
        ],
        "ignore_failure": true,
        "description": "Removes unnecessary docker hub event fields."
      }
    }
  ]
},
  "docs": [
    {
    "_index":"index",
    "_id":"id",
    "_source" : {
      "@timestamp": "2021-01-15T10:07:40.598Z",
      "@metadata": {
        "beat": "metricbeat",
        "type": "_doc",
        "version": "7.10.1"
      },
      "http": {
        "docker_hub": {
          "status": 1,
          "description": "MySQL is a widely used, open-source relational database management system (RDBMS).",
          "has_starred": false,
          "name": "mysql",
          "star_count": 10385,
          "pull_count": 2.123643931e+09,
          "permissions": {
            "read": true,
            "write": false,
            "admin": false
          },
          "can_edit": false,
          "collaborator_count": 0,
          "repository_type": "image",
          "full_description": "# Quick reference\n\n-\t**Maintained by**:  \n\t[the Docker Community and the MySQL Team](https://github.com/docker-library/mysql)\n\n-\t**Where to get help**:  \n\t[the Docker Community Forums](https://forums.docker.com/), [the Docker Community Slack](https://dockr.ly/slack), or [Stack Overflow](https://stackoverflow.com/search?tab=newest&q=docker)\n\n# Supported tags and respective `Dockerfile` links\n\n-\t[`8.0.22`, `8.0`, `8`, `latest`](https://github.com/docker-library/mysql/blob/b0a0e546712534b30ac13e8b2829f23654facbc5/8.0/Dockerfile.debian)\n-\t[`5.7.32`, `5.7`, `5`](https://github.com/docker-library/mysql/blob/b0a0e546712534b30ac13e8b2829f23654facbc5/5.7/Dockerfile.debian)\n-\t[`5.6.50`, `5.6`](https://github.com/docker-library/mysql/blob/b0a0e546712534b30ac13e8b2829f23654facbc5/5.6/Dockerfile.debian)\n\n# Quick reference (cont.)\n\n-\t**Where to file issues**:  \n\t[https://github.com/docker-library/mysql/issues](https://github.com/docker-library/mysql/issues)\n\n-\t**Supported architectures**: ([more info](https://github.com/docker-library/official-images#architectures-other-than-amd64))  \n\t[`amd64`](https://hub.docker.com/r/amd64/mysql/)\n\n-\t**Published image artifact details**:  \n\t[repo-info repo's `repos/mysql/` directory](https://github.com/docker-library/repo-info/blob/master/repos/mysql) ([history](https://github.com/docker-library/repo-info/commits/master/repos/mysql))  \n\t(image metadata, transfer size, etc)\n\n-\t**Image updates**:  \n\t[official-images PRs with label `library/mysql`](https://github.com/docker-library/official-images/pulls?q=label%3Alibrary%2Fmysql)  \n\t[official-images repo's `library/mysql` file](https://github.com/docker-library/official-images/blob/master/library/mysql) ([history](https://github.com/docker-library/official-images/commits/master/library/mysql))\n\n-\t**Source of this description**:  \n\t[docs repo's `mysql/` directory](https://github.com/docker-library/docs/tree/master/mysql) ([history](https://github.com/docker-library/docs/commits/master/mysql))\n\n# What is MySQL?\n\nMySQL is the world's most popular open source database. With its proven performance, reliability and ease-of-use, MySQL has become the leading database choice for web-based applications, covering the entire range from personal projects and websites, via e-commerce and information services, all the way to high profile web properties including Facebook, Twitter, YouTube, Yahoo! and many more.\n\nFor more information and related downloads for MySQL Server and other MySQL products, please visit [www.mysql.com](http://www.mysql.com).\n\n![logo](https://raw.githubusercontent.com/docker-library/docs/c408469abbac35ad1e4a50a6618836420eb9502e/mysql/logo.png)\n\n# How to use this image\n\n## Start a `mysql` server instance\n\nStarting a MySQL instance is simple:\n\n```console\n$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n```\n\n... where `some-mysql` is the name you want to assign to your container, `my-secret-pw` is the password to be set for the MySQL root user and `tag` is the tag specifying the MySQL version you want. See the list above for relevant tags.\n\n## Connect to MySQL from the MySQL command line client\n\nThe following command starts another `mysql` container instance and runs the `mysql` command line client against your original `mysql` container, allowing you to execute SQL statements against your database instance:\n\n```console\n$ docker run -it --network some-network --rm mysql mysql -hsome-mysql -uexample-user -p\n```\n\n... where `some-mysql` is the name of your original `mysql` container (connected to the `some-network` Docker network).\n\nThis image can also be used as a client for non-Docker or remote instances:\n\n```console\n$ docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p\n```\n\nMore information about the MySQL command line client can be found in the [MySQL documentation](http://dev.mysql.com/doc/en/mysql.html)\n\n## ... via [`docker stack deploy`](https://docs.docker.com/engine/reference/commandline/stack_deploy/) or [`docker-compose`](https://github.com/docker/compose)\n\nExample `stack.yml` for `mysql`:\n\n```yaml\n# Use root/example as user/password credentials\nversion: '3.1'\n\nservices:\n\n  db:\n    image: mysql\n    command: --default-authentication-plugin=mysql_native_password\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n\n  adminer:\n    image: adminer\n    restart: always\n    ports:\n      - 8080:8080\n```\n\n[![Try in PWD](https://github.com/play-with-docker/stacks/raw/cff22438cb4195ace27f9b15784bbb497047afa7/assets/images/button.png)](http://play-with-docker.com?stack=https://raw.githubusercontent.com/docker-library/docs/b664a62bb7be3e0cbc2304e306ea42f33244fad1/mysql/stack.yml)\n\nRun `docker stack deploy -c stack.yml mysql` (or `docker-compose -f stack.yml up`), wait for it to initialize completely, and visit `http://swarm-ip:8080`, `http://localhost:8080`, or `http://host-ip:8080` (as appropriate).\n\n## Container shell access and viewing MySQL logs\n\nThe `docker exec` command allows you to run commands inside a Docker container. The following command line will give you a bash shell inside your `mysql` container:\n\n```console\n$ docker exec -it some-mysql bash\n```\n\nThe log is available through Docker's container log:\n\n```console\n$ docker logs some-mysql\n```\n\n## Using a custom MySQL configuration file\n\nThe default configuration for MySQL can be found in `/etc/mysql/my.cnf`, which may `!includedir` additional directories such as `/etc/mysql/conf.d` or `/etc/mysql/mysql.conf.d`. Please inspect the relevant files and directories within the `mysql` image itself for more details.\n\nIf `/my/custom/config-file.cnf` is the path and name of your custom configuration file, you can start your `mysql` container like this (note that only the directory path of the custom config file is used in this command):\n\n```console\n$ docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n```\n\nThis will start a new container `some-mysql` where the MySQL instance uses the combined startup settings from `/etc/mysql/my.cnf` and `/etc/mysql/conf.d/config-file.cnf`, with settings from the latter taking precedence.\n\n### Configuration without a `cnf` file\n\nMany configuration options can be passed as flags to `mysqld`. This will give you the flexibility to customize the container without needing a `cnf` file. For example, if you want to change the default encoding and collation for all tables to use UTF-8 (`utf8mb4`) just run the following:\n\n```console\n$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n```\n\nIf you would like to see a complete list of available options, just run:\n\n```console\n$ docker run -it --rm mysql:tag --verbose --help\n```\n\n## Environment Variables\n\nWhen you start the `mysql` image, you can adjust the configuration of the MySQL instance by passing one or more environment variables on the `docker run` command line. Do note that none of the variables below will have any effect if you start the container with a data directory that already contains a database: any pre-existing database will always be left untouched on container startup.\n\nSee also https://dev.mysql.com/doc/refman/5.7/en/environment-variables.html for documentation of environment variables which MySQL itself respects (especially variables like `MYSQL_HOST`, which is known to cause issues when used with this image).\n\n### `MYSQL_ROOT_PASSWORD`\n\nThis variable is mandatory and specifies the password that will be set for the MySQL `root` superuser account. In the above example, it was set to `my-secret-pw`.\n\n### `MYSQL_DATABASE`\n\nThis variable is optional and allows you to specify the name of a database to be created on image startup. If a user/password was supplied (see below) then that user will be granted superuser access ([corresponding to `GRANT ALL`](http://dev.mysql.com/doc/en/adding-users.html)) to this database.\n\n### `MYSQL_USER`, `MYSQL_PASSWORD`\n\nThese variables are optional, used in conjunction to create a new user and to set that user's password. This user will be granted superuser permissions (see above) for the database specified by the `MYSQL_DATABASE` variable. Both variables are required for a user to be created.\n\nDo note that there is no need to use this mechanism to create the root superuser, that user gets created by default with the password specified by the `MYSQL_ROOT_PASSWORD` variable.\n\n### `MYSQL_ALLOW_EMPTY_PASSWORD`\n\nThis is an optional variable. Set to a non-empty value, like `yes`, to allow the container to be started with a blank password for the root user. *NOTE*: Setting this variable to `yes` is not recommended unless you really know what you are doing, since this will leave your MySQL instance completely unprotected, allowing anyone to gain complete superuser access.\n\n### `MYSQL_RANDOM_ROOT_PASSWORD`\n\nThis is an optional variable. Set to a non-empty value, like `yes`, to generate a random initial password for the root user (using `pwgen`). The generated root password will be printed to stdout (`GENERATED ROOT PASSWORD: .....`).\n\n### `MYSQL_ONETIME_PASSWORD`\n\nSets root (*not* the user specified in `MYSQL_USER`!) user as expired once init is complete, forcing a password change on first login. Any non-empty value will activate this setting. *NOTE*: This feature is supported on MySQL 5.6+ only. Using this option on MySQL 5.5 will throw an appropriate error during initialization.\n\n### `MYSQL_INITDB_SKIP_TZINFO`\n\nBy default, the entrypoint script automatically loads the timezone data needed for the `CONVERT_TZ()` function. If it is not needed, any non-empty value disables timezone loading.\n\n## Docker Secrets\n\nAs an alternative to passing sensitive information via environment variables, `_FILE` may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container. In particular, this can be used to load passwords from Docker secrets stored in `/run/secrets/<secret_name>` files. For example:\n\n```console\n$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql-root -d mysql:tag\n```\n\nCurrently, this is only supported for `MYSQL_ROOT_PASSWORD`, `MYSQL_ROOT_HOST`, `MYSQL_DATABASE`, `MYSQL_USER`, and `MYSQL_PASSWORD`.\n\n# Initializing a fresh instance\n\nWhen a container is started for the first time, a new database with the specified name will be created and initialized with the provided configuration variables. Furthermore, it will execute files with extensions `.sh`, `.sql` and `.sql.gz` that are found in `/docker-entrypoint-initdb.d`. Files will be executed in alphabetical order. You can easily populate your `mysql` services by [mounting a SQL dump into that directory](https://docs.docker.com/engine/tutorials/dockervolumes/#mount-a-host-file-as-a-data-volume) and provide [custom images](https://docs.docker.com/reference/builder/) with contributed data. SQL files will be imported by default to the database specified by the `MYSQL_DATABASE` variable.\n\n# Caveats\n\n## Where to Store Data\n\nImportant note: There are several ways to store data used by applications that run in Docker containers. We encourage users of the `mysql` images to familiarize themselves with the options available, including:\n\n-\tLet Docker manage the storage of your database data [by writing the database files to disk on the host system using its own internal volume management](https://docs.docker.com/engine/tutorials/dockervolumes/#adding-a-data-volume). This is the default and is easy and fairly transparent to the user. The downside is that the files may be hard to locate for tools and applications that run directly on the host system, i.e. outside containers.\n-\tCreate a data directory on the host system (outside the container) and [mount this to a directory visible from inside the container](https://docs.docker.com/engine/tutorials/dockervolumes/#mount-a-host-directory-as-a-data-volume). This places the database files in a known location on the host system, and makes it easy for tools and applications on the host system to access the files. The downside is that the user needs to make sure that the directory exists, and that e.g. directory permissions and other security mechanisms on the host system are set up correctly.\n\nThe Docker documentation is a good starting point for understanding the different storage options and variations, and there are multiple blogs and forum postings that discuss and give advice in this area. We will simply show the basic procedure here for the latter option above:\n\n1.\tCreate a data directory on a suitable volume on your host system, e.g. `/my/own/datadir`.\n2.\tStart your `mysql` container like this:\n\n\t```console\n\t$ docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\t```\n\nThe `-v /my/own/datadir:/var/lib/mysql` part of the command mounts the `/my/own/datadir` directory from the underlying host system as `/var/lib/mysql` inside the container, where MySQL by default will write its data files.\n\n## No connections until MySQL init completes\n\nIf there is no database initialized when the container starts, then a default database will be created. While this is the expected behavior, this means that it will not accept incoming connections until such initialization completes. This may cause issues when using automation tools, such as `docker-compose`, which start several containers simultaneously.\n\nIf the application you're trying to connect to MySQL does not handle MySQL downtime or waiting for MySQL to start gracefully, then putting a connect-retry loop before the service starts might be necessary. For an example of such an implementation in the official images, see [WordPress](https://github.com/docker-library/wordpress/blob/1b48b4bccd7adb0f7ea1431c7b470a40e186f3da/docker-entrypoint.sh#L195-L235) or [Bonita](https://github.com/docker-library/docs/blob/9660a0cccb87d8db842f33bc0578d769caaf3ba9/bonita/stack.yml#L28-L44).\n\n## Usage against an existing database\n\nIf you start your `mysql` container instance with a data directory that already contains a database (specifically, a `mysql` subdirectory), the `$MYSQL_ROOT_PASSWORD` variable should be omitted from the run command line; it will in any case be ignored, and the pre-existing database will not be changed in any way.\n\n## Running as an arbitrary user\n\nIf you know the permissions of your directory are already set appropriately (such as running against an existing database, as described above) or you have need of running `mysqld` with a specific UID/GID, it is possible to invoke this image with `--user` set to any value (other than `root`/`0`) in order to achieve the desired access/configuration:\n\n```console\n$ mkdir data\n$ ls -lnd data\ndrwxr-xr-x 2 1000 1000 4096 Aug 27 15:54 data\n$ docker run -v \"$PWD/data\":/var/lib/mysql --user 1000:1000 --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n```\n\n## Creating database dumps\n\nMost of the normal tools will work, although their usage might be a little convoluted in some cases to ensure they have access to the `mysqld` server. A simple way to ensure this is to use `docker exec` and run the tool from the same container, similar to the following:\n\n```console\n$ docker exec some-mysql sh -c 'exec mysqldump --all-databases -uroot -p\"$MYSQL_ROOT_PASSWORD\"' > /some/path/on/your/host/all-databases.sql\n```\n\n## Restoring data from dump files\n\nFor restoring data. You can use `docker exec` command with `-i` flag, similar to the following:\n\n```console\n$ docker exec -i some-mysql sh -c 'exec mysql -uroot -p\"$MYSQL_ROOT_PASSWORD\"' < /some/path/on/your/host/all-databases.sql\n```\n\n# License\n\nView [license information](https://www.mysql.com/about/legal/) for the software contained in this image.\n\nAs with all Docker images, these likely also contain other software which may be under other licenses (such as Bash, etc from the base distribution, along with any direct or indirect dependencies of the primary software being contained).\n\nSome additional license information which was able to be auto-detected might be found in [the `repo-info` repository's `mysql/` directory](https://github.com/docker-library/repo-info/tree/master/repos/mysql).\n\nAs for any pre-built image usage, it is the image user's responsibility to ensure that any use of this image complies with any relevant licenses for all software contained within.",
          "namespace": "library",
          "last_updated": "2021-01-12T10:34:20.653605Z",
          "is_migrated": false,
          "user": "library",
          "is_private": false,
          "is_automated": false
        }
      },
      "ecs": {
        "version": "1.6.0"
      },
      "host": {
        "name": "e8de185fde59"
      },
      "agent": {
        "type": "metricbeat",
        "version": "7.10.1",
        "hostname": "e8de185fde59",
        "ephemeral_id": "a8187f55-fd07-4c78-a35d-0bed3fd07f5c",
        "id": "526252d2-8bee-4700-9c54-9b34dbe77666",
        "name": "e8de185fde59"
      },
      "event": {
        "duration": 969071342,
        "dataset": "http.docker_hub",
        "module": "http"
      },
      "metricset": {
        "name": "json",
        "period": 60000
      },
      "service": {
        "address": "https://hub.docker.com/v2/repositories/library/mysql",
        "type": "http"
      }
    }},
    {
    "_index":"index",
    "_id":"id",
    "_source" : {
      "@timestamp": "2021-01-15T10:07:40.660Z",
      "@metadata": {
        "beat": "metricbeat",
        "type": "_doc",
        "version": "7.10.1"
      },
      "metricset": {
        "name": "json",
        "period": 60000
      },
      "service": {
        "type": "http",
        "address": "https://hub.docker.com/v2/repositories/library/httpd"
      },
      "http": {
        "docker_hub": {
          "can_edit": false,
          "repository_type": "image",
          "description": "The Apache HTTP Server Project",
          "pull_count": 2.244658322e+09,
          "has_starred": false,
          "collaborator_count": 0,
          "namespace": "library",
          "is_private": false,
          "name": "httpd",
          "full_description": "# Quick reference\n\n-\t**Maintained by**:  \n\t[the Docker Community](https://github.com/docker-library/httpd)\n\n-\t**Where to get help**:  \n\t[the Docker Community Forums](https://forums.docker.com/), [the Docker Community Slack](https://dockr.ly/slack), or [Stack Overflow](https://stackoverflow.com/search?tab=newest&q=docker)\n\n# Supported tags and respective `Dockerfile` links\n\n-\t[`2.4.46`, `2.4`, `2`, `latest`](https://github.com/docker-library/httpd/blob/077141ee37fca63972292c562ec0f632d0f831b1/2.4/Dockerfile)\n-\t[`2.4.46-alpine`, `2.4-alpine`, `2-alpine`, `alpine`](https://github.com/docker-library/httpd/blob/5bc2d71c4c1949d98a2e8671eadc5043b6c0b7f4/2.4/alpine/Dockerfile)\n\n# Quick reference (cont.)\n\n-\t**Where to file issues**:  \n\t[https://github.com/docker-library/httpd/issues](https://github.com/docker-library/httpd/issues)\n\n-\t**Supported architectures**: ([more info](https://github.com/docker-library/official-images#architectures-other-than-amd64))  \n\t[`amd64`](https://hub.docker.com/r/amd64/httpd/), [`arm32v5`](https://hub.docker.com/r/arm32v5/httpd/), [`arm32v6`](https://hub.docker.com/r/arm32v6/httpd/), [`arm32v7`](https://hub.docker.com/r/arm32v7/httpd/), [`arm64v8`](https://hub.docker.com/r/arm64v8/httpd/), [`i386`](https://hub.docker.com/r/i386/httpd/), [`mips64le`](https://hub.docker.com/r/mips64le/httpd/), [`ppc64le`](https://hub.docker.com/r/ppc64le/httpd/), [`s390x`](https://hub.docker.com/r/s390x/httpd/)\n\n-\t**Published image artifact details**:  \n\t[repo-info repo's `repos/httpd/` directory](https://github.com/docker-library/repo-info/blob/master/repos/httpd) ([history](https://github.com/docker-library/repo-info/commits/master/repos/httpd))  \n\t(image metadata, transfer size, etc)\n\n-\t**Image updates**:  \n\t[official-images PRs with label `library/httpd`](https://github.com/docker-library/official-images/pulls?q=label%3Alibrary%2Fhttpd)  \n\t[official-images repo's `library/httpd` file](https://github.com/docker-library/official-images/blob/master/library/httpd) ([history](https://github.com/docker-library/official-images/commits/master/library/httpd))\n\n-\t**Source of this description**:  \n\t[docs repo's `httpd/` directory](https://github.com/docker-library/docs/tree/master/httpd) ([history](https://github.com/docker-library/docs/commits/master/httpd))\n\n# What is httpd?\n\nThe Apache HTTP Server, colloquially called Apache, is a Web server application notable for playing a key role in the initial growth of the World Wide Web. Originally based on the NCSA HTTPd server, development of Apache began in early 1995 after work on the NCSA code stalled. Apache quickly overtook NCSA HTTPd as the dominant HTTP server, and has remained the most popular HTTP server in use since April 1996.\n\n> [wikipedia.org/wiki/Apache_HTTP_Server](http://en.wikipedia.org/wiki/Apache_HTTP_Server)\n\n![logo](https://raw.githubusercontent.com/docker-library/docs/8e367edd887f5fe876890a0ab4d08806527a1571/httpd/logo.png)\n\n# How to use this image.\n\nThis image only contains Apache httpd with the defaults from upstream. There is no PHP installed, but it should not be hard to extend. On the other hand, if you just want PHP with Apache httpd see the [PHP image](https://hub.docker.com/_/php/) and look at the `-apache` tags. If you want to run a simple HTML server, add a simple Dockerfile to your project where `public-html/` is the directory containing all your HTML.\n\n### Create a `Dockerfile` in your project\n\n```dockerfile\nFROM httpd:2.4\nCOPY ./public-html/ /usr/local/apache2/htdocs/\n```\n\nThen, run the commands to build and run the Docker image:\n\n```console\n$ docker build -t my-apache2 .\n$ docker run -dit --name my-running-app -p 8080:80 my-apache2\n```\n\nVisit http://localhost:8080 and you will see It works!\n\n### Without a `Dockerfile`\n\nIf you don't want to include a `Dockerfile` in your project, it is sufficient to do the following:\n\n```console\n$ docker run -dit --name my-apache-app -p 8080:80 -v \"$PWD\":/usr/local/apache2/htdocs/ httpd:2.4\n```\n\n### Configuration\n\nTo customize the configuration of the httpd server, first obtain the upstream default configuration from the container:\n\n```console\n$ docker run --rm httpd:2.4 cat /usr/local/apache2/conf/httpd.conf > my-httpd.conf\n```\n\nYou can then `COPY` your custom configuration in as `/usr/local/apache2/conf/httpd.conf`:\n\n```dockerfile\nFROM httpd:2.4\nCOPY ./my-httpd.conf /usr/local/apache2/conf/httpd.conf\n```\n\n#### SSL/HTTPS\n\nIf you want to run your web traffic over SSL, the simplest setup is to `COPY` or mount (`-v`) your `server.crt` and `server.key` into `/usr/local/apache2/conf/` and then customize the `/usr/local/apache2/conf/httpd.conf` by removing the comment symbol from the following lines:\n\n```apacheconf\n...\n#LoadModule socache_shmcb_module modules/mod_socache_shmcb.so\n...\n#LoadModule ssl_module modules/mod_ssl.so\n...\n#Include conf/extra/httpd-ssl.conf\n...\n```\n\nThe `conf/extra/httpd-ssl.conf` configuration file will use the certificate files previously added and tell the daemon to also listen on port 443. Be sure to also add something like `-p 443:443` to your `docker run` to forward the https port.\n\nThis could be accomplished with a `sed` line similar to the following:\n\n```dockerfile\nRUN sed -i \\\n\t\t-e 's/^#\\(Include .*httpd-ssl.conf\\)/\\1/' \\\n\t\t-e 's/^#\\(LoadModule .*mod_ssl.so\\)/\\1/' \\\n\t\t-e 's/^#\\(LoadModule .*mod_socache_shmcb.so\\)/\\1/' \\\n\t\tconf/httpd.conf\n```\n\nThe previous steps should work well for development, but we recommend customizing your conf files for production, see [httpd.apache.org](https://httpd.apache.org/docs/2.4/ssl/ssl_faq.html) for more information about SSL setup.\n\n# Image Variants\n\nThe `httpd` images come in many flavors, each designed for a specific use case.\n\n## `httpd:<version>`\n\nThis is the defacto image. If you are unsure about what your needs are, you probably want to use this one. It is designed to be used both as a throw away container (mount your source code and start the container to start your app), as well as the base to build other images off of.\n\n## `httpd:<version>-alpine`\n\nThis image is based on the popular [Alpine Linux project](https://alpinelinux.org), available in [the `alpine` official image](https://hub.docker.com/_/alpine). Alpine Linux is much smaller than most distribution base images (~5MB), and thus leads to much slimmer images in general.\n\nThis variant is highly recommended when final image size being as small as possible is desired. The main caveat to note is that it does use [musl libc](https://musl.libc.org) instead of [glibc and friends](https://www.etalabs.net/compare_libcs.html), so certain software might run into issues depending on the depth of their libc requirements. However, most software doesn't have an issue with this, so this variant is usually a very safe choice. See [this Hacker News comment thread](https://news.ycombinator.com/item?id=10782897) for more discussion of the issues that might arise and some pro/con comparisons of using Alpine-based images.\n\nTo minimize image size, it's uncommon for additional related tools (such as `git` or `bash`) to be included in Alpine-based images. Using this image as a base, add the things you need in your own Dockerfile (see the [`alpine` image description](https://hub.docker.com/_/alpine/) for examples of how to install packages if you are unfamiliar).\n\n# License\n\nView [license information](https://www.apache.org/licenses/) for the software contained in this image.\n\nAs with all Docker images, these likely also contain other software which may be under other licenses (such as Bash, etc from the base distribution, along with any direct or indirect dependencies of the primary software being contained).\n\nSome additional license information which was able to be auto-detected might be found in [the `repo-info` repository's `httpd/` directory](https://github.com/docker-library/repo-info/tree/master/repos/httpd).\n\nAs for any pre-built image usage, it is the image user's responsibility to ensure that any use of this image complies with any relevant licenses for all software contained within.",
          "last_updated": "2021-01-12T13:42:29.184204Z",
          "status": 1,
          "is_migrated": false,
          "permissions": {
            "read": true,
            "write": false,
            "admin": false
          },
          "is_automated": false,
          "star_count": 3321,
          "user": "library"
        }
      },
      "agent": {
        "name": "e8de185fde59",
        "type": "metricbeat",
        "version": "7.10.1",
        "hostname": "e8de185fde59",
        "ephemeral_id": "a8187f55-fd07-4c78-a35d-0bed3fd07f5c",
        "id": "526252d2-8bee-4700-9c54-9b34dbe77666"
      },
      "ecs": {
        "version": "1.6.0"
      },
      "host": {
        "name": "e8de185fde59"
      },
      "event": {
        "duration": 909992043,
        "dataset": "http.docker_hub",
        "module": "http"
      }
    }},
    {
    "_index":"index",
    "_id":"id",
    "_source" : {
      "@timestamp": "2021-01-15T10:07:40.745Z",
      "@metadata": {
        "beat": "metricbeat",
        "type": "_doc",
        "version": "7.10.1"
      },
      "service": {
        "address": "https://hub.docker.com/v2/repositories/radoondas/owmbeat",
        "type": "http"
      },
      "event": {
        "dataset": "http.docker_hub",
        "module": "http",
        "duration": 825101442
      },
      "http": {
        "docker_hub": {
          "is_private": false,
          "is_automated": false,
          "star_count": 0,
          "is_migrated": false,
          "namespace": "radoondas",
          "status": 1,
          "user": "radoondas",
          "can_edit": false,
          "has_starred": false,
          "last_updated": "2020-04-29T06:19:44.540033Z",
          "description": "This is repository for Owmbeat, the OpenWeatherMap beat.\nhttps://github.com/radoondas/owmbeat",
          "name": "owmbeat",
          "repository_type": "image",
          "collaborator_count": 0,
          "pull_count": 158,
          "full_description": "https://github.com/radoondas/owmbeat",
          "permissions": {
            "admin": false,
            "read": true,
            "write": false
          }
        }
      },
      "ecs": {
        "version": "1.6.0"
      },
      "host": {
        "name": "e8de185fde59"
      },
      "agent": {
        "hostname": "e8de185fde59",
        "ephemeral_id": "a8187f55-fd07-4c78-a35d-0bed3fd07f5c",
        "id": "526252d2-8bee-4700-9c54-9b34dbe77666",
        "name": "e8de185fde59",
        "type": "metricbeat",
        "version": "7.10.1"
      },
      "metricset": {
        "name": "json",
        "period": 60000
      }
    }},
    {
    "_index":"index",
    "_id":"id",
    "_source" : {
      "@timestamp": "2021-01-15T10:07:44.474Z",
      "@metadata": {
        "beat": "metricbeat",
        "type": "_doc",
        "version": "7.10.1"
      },
      "http": {
        "docker_hub": {
          "collaborator_count": 0,
          "permissions": {
            "read": true,
            "write": false,
            "admin": false
          },
          "repository_type": "image",
          "has_starred": false,
          "can_edit": false,
          "is_migrated": false,
          "star_count": 0,
          "pull_count": 116,
          "is_private": false,
          "is_automated": false,
          "last_updated": "2020-04-28T19:10:58.600015Z",
          "namespace": "radoondas",
          "description": "",
          "user": "radoondas",
          "status": 1,
          "name": "safecastbeat"
        }
      },
      "host": {
        "name": "e8de185fde59"
      },
      "agent": {
        "hostname": "e8de185fde59",
        "ephemeral_id": "a8187f55-fd07-4c78-a35d-0bed3fd07f5c",
        "id": "526252d2-8bee-4700-9c54-9b34dbe77666",
        "name": "e8de185fde59",
        "type": "metricbeat",
        "version": "7.10.1"
      },
      "ecs": {
        "version": "1.6.0"
      },
      "event": {
        "module": "http",
        "duration": 655062144,
        "dataset": "http.docker_hub"
      },
      "metricset": {
        "name": "json",
        "period": 60000
      },
      "service": {
        "address": "https://hub.docker.com/v2/repositories/radoondas/safecastbeat",
        "type": "http"
      }
    }},
    {
    "_index":"index",
    "_id":"id",
    "_source" : {
      "@timestamp": "2021-01-15T10:07:45.153Z",
      "@metadata": {
        "beat": "metricbeat",
        "type": "_doc",
        "version": "7.10.1"
      },
      "host": {
        "name": "e8de185fde59"
      },
      "agent": {
        "name": "e8de185fde59",
        "type": "metricbeat",
        "version": "7.10.1",
        "hostname": "e8de185fde59",
        "ephemeral_id": "a8187f55-fd07-4c78-a35d-0bed3fd07f5c",
        "id": "526252d2-8bee-4700-9c54-9b34dbe77666"
      },
      "service": {
        "type": "http",
        "address": "https://hub.docker.com/v2/repositories/radoondas/earthquakebeat"
      },
      "event": {
        "duration": 653299826,
        "dataset": "http.docker_hub",
        "module": "http"
      },
      "metricset": {
        "period": 60000,
        "name": "json"
      },
      "http": {
        "docker_hub": {
          "star_count": 0,
          "name": "earthquakebeat",
          "namespace": "radoondas",
          "repository_type": "image",
          "collaborator_count": 0,
          "can_edit": false,
          "user": "radoondas",
          "is_automated": false,
          "pull_count": 50,
          "description": "",
          "has_starred": false,
          "is_migrated": false,
          "permissions": {
            "read": true,
            "write": false,
            "admin": false
          },
          "last_updated": "2020-04-24T19:31:45.396576Z",
          "is_private": false,
          "status": 1
        }
      },
      "ecs": {
        "version": "1.6.0"
      }
    }},
    {
    "_index":"index",
    "_id":"id",
    "_source" : {
      "@timestamp": "2021-01-15T10:07:45.755Z",
      "@metadata": {
        "beat": "metricbeat",
        "type": "_doc",
        "version": "7.10.1"
      },
      "service": {
        "type": "http",
        "address": "https://hub.docker.com/v2/repositories/radoondas/netatmobeat"
      },
      "event": {
        "dataset": "http.docker_hub",
        "module": "http",
        "duration": 670773253
      },
      "metricset": {
        "name": "json",
        "period": 60000
      },
      "http": {
        "docker_hub": {
          "user": "radoondas",
          "has_starred": false,
          "namespace": "radoondas",
          "can_edit": false,
          "collaborator_count": 0,
          "full_description": "Netatmobeat\nhttps://github.com/radoondas/netatmobeat",
          "description": "https://github.com/radoondas/netatmobeat",
          "star_count": 0,
          "last_updated": "2020-04-30T14:19:23.613112Z",
          "repository_type": "image",
          "is_migrated": false,
          "pull_count": 159,
          "name": "netatmobeat",
          "is_private": false,
          "is_automated": false,
          "status": 1,
          "permissions": {
            "write": false,
            "admin": false,
            "read": true
          }
        }
      },
      "ecs": {
        "version": "1.6.0"
      },
      "host": {
        "name": "e8de185fde59"
      },
      "agent": {
        "hostname": "e8de185fde59",
        "ephemeral_id": "a8187f55-fd07-4c78-a35d-0bed3fd07f5c",
        "id": "526252d2-8bee-4700-9c54-9b34dbe77666",
        "name": "e8de185fde59",
        "type": "metricbeat",
        "version": "7.10.1"
      }
    }
  }
]
}